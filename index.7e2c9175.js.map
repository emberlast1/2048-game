{"mappings":"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","sources":["<anon>","src/scripts/main.js","src/modules/Game.class.js"],"sourcesContent":["\"use strict\";\nvar $a5fd07fa01589658$exports = {};\n/* eslint-disable operator-linebreak */ /* eslint-disable max-len */ \"use strict\";\n/**\r\n * This class represents the game.\r\n * Now it has a basic structure, that is needed for testing.\r\n * Feel free to add more props and methods if needed.\r\n */ class $a5fd07fa01589658$var$Game {\n    constructor(initialState = this.createEmptyBoard()){\n        this.board = initialState;\n        this.score = 0;\n        this.status = \"idle\";\n    }\n    createEmptyBoard() {\n        return [\n            [\n                0,\n                0,\n                0,\n                0\n            ],\n            [\n                0,\n                0,\n                0,\n                0\n            ],\n            [\n                0,\n                0,\n                0,\n                0\n            ],\n            [\n                0,\n                0,\n                0,\n                0\n            ]\n        ];\n    }\n    moveLeft() {\n        let moved = false;\n        for(let row = 0; row < 4; row++){\n            let newRow = this.board[row].filter((val)=>val);\n            while(newRow.length < 4)newRow.push(0);\n            for(let i = 0; i < newRow.length - 1; i++)if (newRow[i] === newRow[i + 1]) {\n                newRow[i] *= 2;\n                newRow[i + 1] = 0;\n                this.score += newRow[i];\n            }\n            newRow = newRow.filter((val)=>val);\n            while(newRow.length < 4)newRow.push(0);\n            if (this.board[row].join() !== newRow.join()) {\n                this.board[row] = newRow;\n                moved = true;\n            }\n        }\n        if (moved) {\n            this.addRandomTile();\n            this.gameStatus();\n        }\n    }\n    moveRight() {\n        let moved = false;\n        for(let row = 0; row < 4; row++){\n            let newRow = this.board[row].filter((val)=>val).reverse();\n            while(newRow.length < 4)newRow.push(0);\n            for(let i = 0; i < newRow.length - 1; i++)if (newRow[i] === newRow[i + 1]) {\n                newRow[i] *= 2;\n                newRow[i + 1] = 0;\n                this.score += newRow[i];\n            }\n            newRow = newRow.filter((val)=>val).reverse();\n            while(newRow.length < 4)newRow.unshift(0);\n            if (this.board[row].join() !== newRow.join()) {\n                this.board[row] = newRow;\n                moved = true;\n            }\n        }\n        if (moved) {\n            this.addRandomTile();\n            this.gameStatus();\n        }\n    }\n    moveUp() {\n        let moved = false;\n        for(let col = 0; col < 4; col++){\n            let newCol = [];\n            for(let row = 0; row < 4; row++)if (this.board[row][col] !== 0) newCol.push(this.board[row][col]);\n            while(newCol.length < 4)newCol.push(0);\n            for(let i = 0; i < newCol.length; i++)if (newCol[i] === newCol[i + 1]) {\n                newCol[i] *= 2;\n                newCol[i + 1] = 0;\n                this.score += newCol[i];\n            }\n            newCol = newCol.filter((val)=>val);\n            while(newCol.length < 4)newCol.push(0);\n            for(let row = 0; row < 4; row++){\n                if (this.board[row][col] !== newCol[row]) moved = true;\n                this.board[row][col] = newCol[row];\n            }\n        }\n        if (moved) {\n            this.addRandomTile();\n            this.gameStatus();\n        }\n    }\n    moveDown() {\n        let moved = false;\n        for(let col = 0; col < 4; col++){\n            let newCol = [];\n            for(let row = 0; row < 4; row++)if (this.board[row][col] !== 0) newCol.push(this.board[row][col]);\n            while(newCol.length < 4)newCol.unshift(0);\n            for(let i = newCol.length - 1; i > 0; i--)if (newCol[i] === newCol[i - 1]) {\n                newCol[i] *= 2;\n                newCol[i - 1] = 0;\n                this.score += newCol[i];\n            }\n            newCol = newCol.filter((val)=>val);\n            while(newCol.length < 4)newCol.unshift(0);\n            for(let row = 0; row < 4; row++){\n                if (this.board[row][col] !== newCol[row]) moved = true;\n                this.board[row][col] = newCol[row];\n            }\n        }\n        if (moved) {\n            this.addRandomTile();\n            this.gameStatus();\n        }\n    }\n    getScore() {\n        return this.score;\n    }\n    getState() {\n        return this.board;\n    }\n    getStatus() {\n        return this.status;\n    }\n    start() {\n        this.board = this.createEmptyBoard();\n        this.score = 0;\n        this.status = \"playing\";\n        this.addRandomTile();\n        this.addRandomTile();\n    }\n    restart() {\n        this.board = this.createEmptyBoard();\n        this.score = 0;\n        this.status = \"idle\";\n    }\n    addRandomTile() {\n        const emptyTiles = [];\n        for(let row = 0; row < 4; row++){\n            for(let cell = 0; cell < 4; cell++)if (this.board[row][cell] === 0) emptyTiles.push({\n                row: row,\n                cell: cell\n            });\n        }\n        if (emptyTiles.length > 0) {\n            const { row: row, cell: cell } = emptyTiles[Math.floor(Math.random() * emptyTiles.length)];\n            this.board[row][cell] = Math.random() < 0.9 ? 2 : 4;\n        }\n    }\n    gameStatus() {\n        for (const row of this.board)if (row.includes(2048)) {\n            this.status = \"win\";\n            return;\n        }\n        for(let row = 0; row < 4; row++)for(let cell = 0; cell < 4; cell++){\n            if (this.board[row][cell] === 0) return;\n            if (row > 0 && this.board[row][cell] === this.board[row - 1][cell]) return;\n            if (cell > 0 && this.board[row][cell] === this.board[row][cell - 1]) return;\n        }\n        this.status = \"lose\";\n    }\n}\n$a5fd07fa01589658$exports = $a5fd07fa01589658$var$Game;\n\n\nconst $09e991522ca7e64e$var$game = new $a5fd07fa01589658$exports();\nconst $09e991522ca7e64e$var$button = document.querySelector(\".button\");\nconst $09e991522ca7e64e$var$messageStart = document.querySelector(\".message-start\");\nconst $09e991522ca7e64e$var$messageLose = document.querySelector(\".message-lose\");\nconst $09e991522ca7e64e$var$messageWin = document.querySelector(\".message-lose\");\n$09e991522ca7e64e$var$button.addEventListener(\"click\", ()=>{\n    if ($09e991522ca7e64e$var$button.classList.contains(\"start\")) {\n        $09e991522ca7e64e$var$button.classList.remove(\"start\");\n        $09e991522ca7e64e$var$button.classList.add(\"restart\");\n        $09e991522ca7e64e$var$button.textContent = \"Restart\";\n        $09e991522ca7e64e$var$messageStart.classList.add(\"hidden\");\n        $09e991522ca7e64e$var$game.start();\n    } else if ($09e991522ca7e64e$var$button.classList.contains(\"restart\")) {\n        $09e991522ca7e64e$var$button.classList.remove(\"restart\");\n        $09e991522ca7e64e$var$button.classList.add(\"start\");\n        $09e991522ca7e64e$var$button.textContent = \"Start\";\n        $09e991522ca7e64e$var$messageStart.classList.remove(\"hidden\");\n        $09e991522ca7e64e$var$game.restart();\n    }\n    $09e991522ca7e64e$var$updateUI($09e991522ca7e64e$var$game);\n});\ndocument.addEventListener(\"keydown\", (e)=>{\n    if ($09e991522ca7e64e$var$game.getStatus() !== \"playing\") return;\n    switch(e.key){\n        case \"ArrowLeft\":\n            $09e991522ca7e64e$var$game.moveLeft();\n            break;\n        case \"ArrowRight\":\n            $09e991522ca7e64e$var$game.moveRight();\n            break;\n        case \"ArrowUp\":\n            $09e991522ca7e64e$var$game.moveUp();\n            break;\n        case \"ArrowDown\":\n            $09e991522ca7e64e$var$game.moveDown();\n            break;\n    }\n    $09e991522ca7e64e$var$updateUI($09e991522ca7e64e$var$game);\n});\nfunction $09e991522ca7e64e$var$updateUI(curGame) {\n    const gameField = document.querySelector(\".game-field\");\n    const cells = gameField.querySelectorAll(\".field-cell\");\n    const score = document.querySelector(\".game-score\");\n    const board = curGame.getState();\n    for(let row = 0; row < 4; row++)for(let col = 0; col < 4; col++){\n        const cellIndex = row * 4 + col;\n        const cell = cells[cellIndex];\n        const cellValue = board[row][col];\n        cell.classList = `field-cell field-cell--${cellValue}`;\n        cell.textContent = cellValue === 0 ? \"\" : cellValue;\n        if (cellValue === 0) cell.classList = \"field-cell\";\n    }\n    score.textContent = curGame.getScore();\n    if (curGame.getStatus() === \"win\") $09e991522ca7e64e$var$messageWin.classList.remove(\"hidden\");\n    else if (curGame.getStatus() === \"lose\") $09e991522ca7e64e$var$messageLose.classList.remove(\"hidden\");\n    else {\n        $09e991522ca7e64e$var$messageWin.classList.add(\"hidden\");\n        $09e991522ca7e64e$var$messageLose.classList.add(\"hidden\");\n    }\n}\n\n\n//# sourceMappingURL=index.7e2c9175.js.map\n","'use strict';\r\n\r\nconst Game = require('../modules/Game.class');\r\nconst game = new Game();\r\nconst button = document.querySelector('.button');\r\nconst messageStart = document.querySelector('.message-start');\r\nconst messageLose = document.querySelector('.message-lose');\r\nconst messageWin = document.querySelector('.message-lose');\r\n\r\nbutton.addEventListener('click', () => {\r\n  if (button.classList.contains('start')) {\r\n    button.classList.remove('start');\r\n    button.classList.add('restart');\r\n    button.textContent = 'Restart';\r\n    messageStart.classList.add('hidden');\r\n\r\n    game.start();\r\n  } else if (button.classList.contains('restart')) {\r\n    button.classList.remove('restart');\r\n    button.classList.add('start');\r\n    button.textContent = 'Start';\r\n    messageStart.classList.remove('hidden');\r\n\r\n    game.restart();\r\n  }\r\n\r\n  updateUI(game);\r\n});\r\n\r\ndocument.addEventListener('keydown', (e) => {\r\n  if (game.getStatus() !== 'playing') {\r\n    return;\r\n  }\r\n\r\n  switch (e.key) {\r\n    case 'ArrowLeft':\r\n      game.moveLeft();\r\n      break;\r\n    case 'ArrowRight':\r\n      game.moveRight();\r\n      break;\r\n    case 'ArrowUp':\r\n      game.moveUp();\r\n      break;\r\n    case 'ArrowDown':\r\n      game.moveDown();\r\n      break;\r\n  }\r\n\r\n  updateUI(game);\r\n});\r\n\r\nfunction updateUI(curGame) {\r\n  const gameField = document.querySelector('.game-field');\r\n  const cells = gameField.querySelectorAll('.field-cell');\r\n  const score = document.querySelector('.game-score');\r\n\r\n  const board = curGame.getState();\r\n\r\n  for (let row = 0; row < 4; row++) {\r\n    for (let col = 0; col < 4; col++) {\r\n      const cellIndex = row * 4 + col;\r\n      const cell = cells[cellIndex];\r\n      const cellValue = board[row][col];\r\n\r\n      cell.classList = `field-cell field-cell--${cellValue}`;\r\n      cell.textContent = cellValue === 0 ? '' : cellValue;\r\n\r\n      if (cellValue === 0) {\r\n        cell.classList = 'field-cell';\r\n      }\r\n    }\r\n  }\r\n\r\n  score.textContent = curGame.getScore();\r\n\r\n  if (curGame.getStatus() === 'win') {\r\n    messageWin.classList.remove('hidden');\r\n  } else if (curGame.getStatus() === 'lose') {\r\n    messageLose.classList.remove('hidden');\r\n  } else {\r\n    messageWin.classList.add('hidden');\r\n    messageLose.classList.add('hidden');\r\n  }\r\n}\r\n","/* eslint-disable operator-linebreak */\r\n/* eslint-disable max-len */\r\n'use strict';\r\n\r\n/**\r\n * This class represents the game.\r\n * Now it has a basic structure, that is needed for testing.\r\n * Feel free to add more props and methods if needed.\r\n */\r\nclass Game {\r\n  constructor(initialState = this.createEmptyBoard()) {\r\n    this.board = initialState;\r\n    this.score = 0;\r\n    this.status = 'idle';\r\n  }\r\n\r\n  createEmptyBoard() {\r\n    return [\r\n      [0, 0, 0, 0],\r\n      [0, 0, 0, 0],\r\n      [0, 0, 0, 0],\r\n      [0, 0, 0, 0],\r\n    ];\r\n  }\r\n\r\n  moveLeft() {\r\n    let moved = false;\r\n\r\n    for (let row = 0; row < 4; row++) {\r\n      let newRow = this.board[row].filter((val) => val);\r\n\r\n      while (newRow.length < 4) {\r\n        newRow.push(0);\r\n      }\r\n\r\n      for (let i = 0; i < newRow.length - 1; i++) {\r\n        if (newRow[i] === newRow[i + 1]) {\r\n          newRow[i] *= 2;\r\n          newRow[i + 1] = 0;\r\n          this.score += newRow[i];\r\n        }\r\n      }\r\n      newRow = newRow.filter((val) => val);\r\n\r\n      while (newRow.length < 4) {\r\n        newRow.push(0);\r\n      }\r\n\r\n      if (this.board[row].join() !== newRow.join()) {\r\n        this.board[row] = newRow;\r\n        moved = true;\r\n      }\r\n    }\r\n\r\n    if (moved) {\r\n      this.addRandomTile();\r\n      this.gameStatus();\r\n    }\r\n  }\r\n\r\n  moveRight() {\r\n    let moved = false;\r\n\r\n    for (let row = 0; row < 4; row++) {\r\n      let newRow = this.board[row].filter((val) => val).reverse();\r\n\r\n      while (newRow.length < 4) {\r\n        newRow.push(0);\r\n      }\r\n\r\n      for (let i = 0; i < newRow.length - 1; i++) {\r\n        if (newRow[i] === newRow[i + 1]) {\r\n          newRow[i] *= 2;\r\n          newRow[i + 1] = 0;\r\n          this.score += newRow[i];\r\n        }\r\n      }\r\n      newRow = newRow.filter((val) => val).reverse();\r\n\r\n      while (newRow.length < 4) {\r\n        newRow.unshift(0);\r\n      }\r\n\r\n      if (this.board[row].join() !== newRow.join()) {\r\n        this.board[row] = newRow;\r\n        moved = true;\r\n      }\r\n    }\r\n\r\n    if (moved) {\r\n      this.addRandomTile();\r\n      this.gameStatus();\r\n    }\r\n  }\r\n\r\n  moveUp() {\r\n    let moved = false;\r\n\r\n    for (let col = 0; col < 4; col++) {\r\n      let newCol = [];\r\n\r\n      for (let row = 0; row < 4; row++) {\r\n        if (this.board[row][col] !== 0) {\r\n          newCol.push(this.board[row][col]);\r\n        }\r\n      }\r\n\r\n      while (newCol.length < 4) {\r\n        newCol.push(0);\r\n      }\r\n\r\n      for (let i = 0; i < newCol.length; i++) {\r\n        if (newCol[i] === newCol[i + 1]) {\r\n          newCol[i] *= 2;\r\n          newCol[i + 1] = 0;\r\n          this.score += newCol[i];\r\n        }\r\n      }\r\n\r\n      newCol = newCol.filter((val) => val);\r\n\r\n      while (newCol.length < 4) {\r\n        newCol.push(0);\r\n      }\r\n\r\n      for (let row = 0; row < 4; row++) {\r\n        if (this.board[row][col] !== newCol[row]) {\r\n          moved = true;\r\n        }\r\n        this.board[row][col] = newCol[row];\r\n      }\r\n    }\r\n\r\n    if (moved) {\r\n      this.addRandomTile();\r\n      this.gameStatus();\r\n    }\r\n  }\r\n\r\n  moveDown() {\r\n    let moved = false;\r\n\r\n    for (let col = 0; col < 4; col++) {\r\n      let newCol = [];\r\n\r\n      for (let row = 0; row < 4; row++) {\r\n        if (this.board[row][col] !== 0) {\r\n          newCol.push(this.board[row][col]);\r\n        }\r\n      }\r\n\r\n      while (newCol.length < 4) {\r\n        newCol.unshift(0);\r\n      }\r\n\r\n      for (let i = newCol.length - 1; i > 0; i--) {\r\n        if (newCol[i] === newCol[i - 1]) {\r\n          newCol[i] *= 2;\r\n          newCol[i - 1] = 0;\r\n          this.score += newCol[i];\r\n        }\r\n      }\r\n\r\n      newCol = newCol.filter((val) => val);\r\n\r\n      while (newCol.length < 4) {\r\n        newCol.unshift(0);\r\n      }\r\n\r\n      for (let row = 0; row < 4; row++) {\r\n        if (this.board[row][col] !== newCol[row]) {\r\n          moved = true;\r\n        }\r\n        this.board[row][col] = newCol[row];\r\n      }\r\n    }\r\n\r\n    if (moved) {\r\n      this.addRandomTile();\r\n      this.gameStatus();\r\n    }\r\n  }\r\n\r\n  getScore() {\r\n    return this.score;\r\n  }\r\n\r\n  getState() {\r\n    return this.board;\r\n  }\r\n\r\n  getStatus() {\r\n    return this.status;\r\n  }\r\n\r\n  start() {\r\n    this.board = this.createEmptyBoard();\r\n    this.score = 0;\r\n    this.status = 'playing';\r\n    this.addRandomTile();\r\n    this.addRandomTile();\r\n  }\r\n\r\n  restart() {\r\n    this.board = this.createEmptyBoard();\r\n    this.score = 0;\r\n    this.status = 'idle';\r\n  }\r\n\r\n  addRandomTile() {\r\n    const emptyTiles = [];\r\n\r\n    for (let row = 0; row < 4; row++) {\r\n      for (let cell = 0; cell < 4; cell++) {\r\n        if (this.board[row][cell] === 0) {\r\n          emptyTiles.push({\n            row, cell,\n          });\r\n        }\r\n      }\r\n    }\r\n\r\n    if (emptyTiles.length > 0) {\r\n      const { row, cell } =\r\n        emptyTiles[Math.floor(Math.random() * emptyTiles.length)];\r\n\r\n      this.board[row][cell] = Math.random() < 0.9 ? 2 : 4;\r\n    }\r\n  }\r\n\r\n  gameStatus() {\r\n    for (const row of this.board) {\r\n      if (row.includes(2048)) {\r\n        this.status = 'win';\r\n\r\n        return;\r\n      }\r\n    }\r\n\r\n    for (let row = 0; row < 4; row++) {\r\n      for (let cell = 0; cell < 4; cell++) {\r\n        if (this.board[row][cell] === 0) {\r\n          return;\r\n        }\r\n\r\n        if (row > 0 && this.board[row][cell] === this.board[row - 1][cell]) {\r\n          return;\r\n        }\r\n\r\n        if (cell > 0 && this.board[row][cell] === this.board[row][cell - 1]) {\r\n          return;\r\n        }\r\n      }\r\n    }\r\n\r\n    this.status = 'lose';\r\n  }\r\n}\r\n\r\nmodule.exports = Game;\r\n"],"names":["$09e991522ca7e64e$var$game","constructor","initialState","createEmptyBoard","board","score","status","moveLeft","moved","row","newRow","filter","val","length","push","i","join","addRandomTile","gameStatus","moveRight","reverse","unshift","moveUp","col","newCol","moveDown","getScore","getState","getStatus","start","restart","emptyTiles","cell","Math","floor","random","includes","$09e991522ca7e64e$var$button","document","querySelector","$09e991522ca7e64e$var$messageStart","$09e991522ca7e64e$var$messageLose","$09e991522ca7e64e$var$messageWin","$09e991522ca7e64e$var$updateUI","curGame","cells","gameField","querySelectorAll","cellValue","classList","textContent","remove","add","addEventListener","contains","e","key"],"version":3,"file":"index.7e2c9175.js.map"}