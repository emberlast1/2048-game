{"mappings":"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","sources":["<anon>","src/scripts/main.js","src/modules/Game.class.js","node_modules/@swc/helpers/esm/_class_call_check.js","node_modules/@swc/helpers/esm/_create_class.js"],"sourcesContent":["(function () {\n\"use strict\";\nvar $3d28d7f1aac198f5$exports = {};\n/* eslint-disable operator-linebreak */ /* eslint-disable max-len */ function $8713978b2328d32b$export$71511d61b312f219(instance, Constructor) {\n    if (!(instance instanceof Constructor)) throw new TypeError(\"Cannot call a class as a function\");\n}\n\n\nfunction $4fc75ccb937ab1df$var$_defineProperties(target, props) {\n    for(var i = 0; i < props.length; i++){\n        var descriptor = props[i];\n        descriptor.enumerable = descriptor.enumerable || false;\n        descriptor.configurable = true;\n        if (\"value\" in descriptor) descriptor.writable = true;\n        Object.defineProperty(target, descriptor.key, descriptor);\n    }\n}\nfunction $4fc75ccb937ab1df$export$71511d61b312f219(Constructor, protoProps, staticProps) {\n    if (protoProps) $4fc75ccb937ab1df$var$_defineProperties(Constructor.prototype, protoProps);\n    if (staticProps) $4fc75ccb937ab1df$var$_defineProperties(Constructor, staticProps);\n    return Constructor;\n}\n\n\n\"use strict\";\n/**\r\n * This class represents the game.\r\n * Now it has a basic structure, that is needed for testing.\r\n * Feel free to add more props and methods if needed.\r\n */ var $3d28d7f1aac198f5$var$Game = /*#__PURE__*/ function() {\n    function Game() {\n        var initialState = arguments.length > 0 && arguments[0] !== void 0 ? arguments[0] : this.createEmptyBoard();\n        (0, $8713978b2328d32b$export$71511d61b312f219)(this, Game);\n        this.board = initialState;\n        this.score = 0;\n        this.status = \"idle\";\n    }\n    (0, $4fc75ccb937ab1df$export$71511d61b312f219)(Game, [\n        {\n            key: \"createEmptyBoard\",\n            value: function createEmptyBoard() {\n                return [\n                    [\n                        0,\n                        0,\n                        0,\n                        0\n                    ],\n                    [\n                        0,\n                        0,\n                        0,\n                        0\n                    ],\n                    [\n                        0,\n                        0,\n                        0,\n                        0\n                    ],\n                    [\n                        0,\n                        0,\n                        0,\n                        0\n                    ]\n                ];\n            }\n        },\n        {\n            key: \"moveLeft\",\n            value: function moveLeft() {\n                var _this = this, _loop = function(row) {\n                    var newRow = _this.board[row].filter(function(val) {\n                        return val;\n                    });\n                    while(newRow.length < 4)newRow.push(0);\n                    for(var i = 0; i < newRow.length - 1; i++)if (newRow[i] === newRow[i + 1]) {\n                        newRow[i] *= 2;\n                        newRow[i + 1] = 0;\n                        _this.score += newRow[i];\n                    }\n                    newRow = newRow.filter(function(val) {\n                        return val;\n                    });\n                    while(newRow.length < 4)newRow.push(0);\n                    if (_this.board[row].join() !== newRow.join()) {\n                        _this.board[row] = newRow;\n                        moved = true;\n                    }\n                };\n                var moved = false;\n                for(var row = 0; row < 4; row++)_loop(row);\n                if (moved) {\n                    this.addRandomTile();\n                    this.gameStatus();\n                }\n            }\n        },\n        {\n            key: \"moveRight\",\n            value: function moveRight() {\n                var _this = this, _loop = function(row) {\n                    var newRow = _this.board[row].filter(function(val) {\n                        return val;\n                    }).reverse();\n                    while(newRow.length < 4)newRow.push(0);\n                    for(var i = 0; i < newRow.length - 1; i++)if (newRow[i] === newRow[i + 1]) {\n                        newRow[i] *= 2;\n                        newRow[i + 1] = 0;\n                        _this.score += newRow[i];\n                    }\n                    newRow = newRow.filter(function(val) {\n                        return val;\n                    }).reverse();\n                    while(newRow.length < 4)newRow.unshift(0);\n                    if (_this.board[row].join() !== newRow.join()) {\n                        _this.board[row] = newRow;\n                        moved = true;\n                    }\n                };\n                var moved = false;\n                for(var row = 0; row < 4; row++)_loop(row);\n                if (moved) {\n                    this.addRandomTile();\n                    this.gameStatus();\n                }\n            }\n        },\n        {\n            key: \"moveUp\",\n            value: function moveUp() {\n                var _this = this, _loop = function(col) {\n                    var newCol = [];\n                    for(var row = 0; row < 4; row++)if (_this.board[row][col] !== 0) newCol.push(_this.board[row][col]);\n                    while(newCol.length < 4)newCol.push(0);\n                    for(var i = 0; i < newCol.length; i++)if (newCol[i] === newCol[i + 1]) {\n                        newCol[i] *= 2;\n                        newCol[i + 1] = 0;\n                        _this.score += newCol[i];\n                    }\n                    newCol = newCol.filter(function(val) {\n                        return val;\n                    });\n                    while(newCol.length < 4)newCol.push(0);\n                    for(var row1 = 0; row1 < 4; row1++){\n                        if (_this.board[row1][col] !== newCol[row1]) moved = true;\n                        _this.board[row1][col] = newCol[row1];\n                    }\n                };\n                var moved = false;\n                for(var col = 0; col < 4; col++)_loop(col);\n                if (moved) {\n                    this.addRandomTile();\n                    this.gameStatus();\n                }\n            }\n        },\n        {\n            key: \"moveDown\",\n            value: function moveDown() {\n                var _this = this, _loop = function(col) {\n                    var newCol = [];\n                    for(var row = 0; row < 4; row++)if (_this.board[row][col] !== 0) newCol.push(_this.board[row][col]);\n                    while(newCol.length < 4)newCol.unshift(0);\n                    for(var i = newCol.length - 1; i > 0; i--)if (newCol[i] === newCol[i - 1]) {\n                        newCol[i] *= 2;\n                        newCol[i - 1] = 0;\n                        _this.score += newCol[i];\n                    }\n                    newCol = newCol.filter(function(val) {\n                        return val;\n                    });\n                    while(newCol.length < 4)newCol.unshift(0);\n                    for(var row1 = 0; row1 < 4; row1++){\n                        if (_this.board[row1][col] !== newCol[row1]) moved = true;\n                        _this.board[row1][col] = newCol[row1];\n                    }\n                };\n                var moved = false;\n                for(var col = 0; col < 4; col++)_loop(col);\n                if (moved) {\n                    this.addRandomTile();\n                    this.gameStatus();\n                }\n            }\n        },\n        {\n            key: \"getScore\",\n            value: function getScore() {\n                return this.score;\n            }\n        },\n        {\n            key: \"getState\",\n            value: function getState() {\n                return this.board;\n            }\n        },\n        {\n            key: \"getStatus\",\n            value: function getStatus() {\n                return this.status;\n            }\n        },\n        {\n            key: \"start\",\n            value: function start() {\n                this.board = this.createEmptyBoard();\n                this.score = 0;\n                this.status = \"playing\";\n                this.addRandomTile();\n                this.addRandomTile();\n            }\n        },\n        {\n            key: \"restart\",\n            value: function restart() {\n                this.board = this.createEmptyBoard();\n                this.score = 0;\n                this.status = \"idle\";\n            }\n        },\n        {\n            key: \"addRandomTile\",\n            value: function addRandomTile() {\n                var emptyTiles = [];\n                for(var row = 0; row < 4; row++){\n                    for(var cell = 0; cell < 4; cell++)if (this.board[row][cell] === 0) emptyTiles.push({\n                        row: row,\n                        cell: cell\n                    });\n                }\n                if (emptyTiles.length > 0) {\n                    var _emptyTiles_Math_floor = emptyTiles[Math.floor(Math.random() * emptyTiles.length)], row1 = _emptyTiles_Math_floor.row, cell1 = _emptyTiles_Math_floor.cell;\n                    this.board[row1][cell1] = Math.random() < 0.9 ? 2 : 4;\n                }\n            }\n        },\n        {\n            key: \"gameStatus\",\n            value: function gameStatus() {\n                var _iteratorNormalCompletion = true, _didIteratorError = false, _iteratorError = undefined;\n                try {\n                    for(var _iterator = this.board[Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true){\n                        var row = _step.value;\n                        if (row.includes(2048)) {\n                            this.status = \"win\";\n                            return;\n                        }\n                    }\n                } catch (err) {\n                    _didIteratorError = true;\n                    _iteratorError = err;\n                } finally{\n                    try {\n                        if (!_iteratorNormalCompletion && _iterator.return != null) {\n                            _iterator.return();\n                        }\n                    } finally{\n                        if (_didIteratorError) {\n                            throw _iteratorError;\n                        }\n                    }\n                }\n                for(var row1 = 0; row1 < 4; row1++)for(var cell = 0; cell < 4; cell++){\n                    if (this.board[row1][cell] === 0) return;\n                    if (row1 > 0 && this.board[row1][cell] === this.board[row1 - 1][cell]) return;\n                    if (cell > 0 && this.board[row1][cell] === this.board[row1][cell - 1]) return;\n                }\n                this.status = \"lose\";\n            }\n        }\n    ]);\n    return Game;\n}();\n$3d28d7f1aac198f5$exports = $3d28d7f1aac198f5$var$Game;\n\n\nvar $197cd56b15c33885$var$game = new $3d28d7f1aac198f5$exports();\nvar $197cd56b15c33885$var$button = document.querySelector(\".button\");\nvar $197cd56b15c33885$var$messageStart = document.querySelector(\".message-start\");\nvar $197cd56b15c33885$var$messageLose = document.querySelector(\".message-lose\");\nvar $197cd56b15c33885$var$messageWin = document.querySelector(\".message-lose\");\n$197cd56b15c33885$var$button.addEventListener(\"click\", function() {\n    if ($197cd56b15c33885$var$button.classList.contains(\"start\")) {\n        $197cd56b15c33885$var$button.classList.remove(\"start\");\n        $197cd56b15c33885$var$button.classList.add(\"restart\");\n        $197cd56b15c33885$var$button.textContent = \"Restart\";\n        $197cd56b15c33885$var$messageStart.classList.add(\"hidden\");\n        $197cd56b15c33885$var$game.start();\n    } else if ($197cd56b15c33885$var$button.classList.contains(\"restart\")) {\n        $197cd56b15c33885$var$button.classList.remove(\"restart\");\n        $197cd56b15c33885$var$button.classList.add(\"start\");\n        $197cd56b15c33885$var$button.textContent = \"Start\";\n        $197cd56b15c33885$var$messageStart.classList.remove(\"hidden\");\n        $197cd56b15c33885$var$game.restart();\n    }\n    $197cd56b15c33885$var$updateUI($197cd56b15c33885$var$game);\n});\ndocument.addEventListener(\"keydown\", function(e) {\n    if ($197cd56b15c33885$var$game.getStatus() !== \"playing\") return;\n    switch(e.key){\n        case \"ArrowLeft\":\n            $197cd56b15c33885$var$game.moveLeft();\n            break;\n        case \"ArrowRight\":\n            $197cd56b15c33885$var$game.moveRight();\n            break;\n        case \"ArrowUp\":\n            $197cd56b15c33885$var$game.moveUp();\n            break;\n        case \"ArrowDown\":\n            $197cd56b15c33885$var$game.moveDown();\n            break;\n    }\n    $197cd56b15c33885$var$updateUI($197cd56b15c33885$var$game);\n});\nfunction $197cd56b15c33885$var$updateUI(curGame) {\n    var gameField = document.querySelector(\".game-field\");\n    var cells = gameField.querySelectorAll(\".field-cell\");\n    var score = document.querySelector(\".game-score\");\n    var board = curGame.getState();\n    for(var row = 0; row < 4; row++)for(var col = 0; col < 4; col++){\n        var cellIndex = row * 4 + col;\n        var cell = cells[cellIndex];\n        var cellValue = board[row][col];\n        cell.classList = \"field-cell field-cell--\".concat(cellValue);\n        cell.textContent = cellValue === 0 ? \"\" : cellValue;\n        if (cellValue === 0) cell.classList = \"field-cell\";\n    }\n    score.textContent = curGame.getScore();\n    if (curGame.getStatus() === \"win\") $197cd56b15c33885$var$messageWin.classList.remove(\"hidden\");\n    else if (curGame.getStatus() === \"lose\") $197cd56b15c33885$var$messageLose.classList.remove(\"hidden\");\n    else {\n        $197cd56b15c33885$var$messageWin.classList.add(\"hidden\");\n        $197cd56b15c33885$var$messageLose.classList.add(\"hidden\");\n    }\n}\n\n})();\n//# sourceMappingURL=index.a2b4fa1a.js.map\n","'use strict';\r\n\r\nconst Game = require('../modules/Game.class');\r\nconst game = new Game();\r\nconst button = document.querySelector('.button');\r\nconst messageStart = document.querySelector('.message-start');\r\nconst messageLose = document.querySelector('.message-lose');\r\nconst messageWin = document.querySelector('.message-lose');\r\n\r\nbutton.addEventListener('click', () => {\r\n  if (button.classList.contains('start')) {\r\n    button.classList.remove('start');\r\n    button.classList.add('restart');\r\n    button.textContent = 'Restart';\r\n    messageStart.classList.add('hidden');\r\n\r\n    game.start();\r\n  } else if (button.classList.contains('restart')) {\r\n    button.classList.remove('restart');\r\n    button.classList.add('start');\r\n    button.textContent = 'Start';\r\n    messageStart.classList.remove('hidden');\r\n\r\n    game.restart();\r\n  }\r\n\r\n  updateUI(game);\r\n});\r\n\r\ndocument.addEventListener('keydown', (e) => {\r\n  if (game.getStatus() !== 'playing') {\r\n    return;\r\n  }\r\n\r\n  switch (e.key) {\r\n    case 'ArrowLeft':\r\n      game.moveLeft();\r\n      break;\r\n    case 'ArrowRight':\r\n      game.moveRight();\r\n      break;\r\n    case 'ArrowUp':\r\n      game.moveUp();\r\n      break;\r\n    case 'ArrowDown':\r\n      game.moveDown();\r\n      break;\r\n  }\r\n\r\n  updateUI(game);\r\n});\r\n\r\nfunction updateUI(curGame) {\r\n  const gameField = document.querySelector('.game-field');\r\n  const cells = gameField.querySelectorAll('.field-cell');\r\n  const score = document.querySelector('.game-score');\r\n\r\n  const board = curGame.getState();\r\n\r\n  for (let row = 0; row < 4; row++) {\r\n    for (let col = 0; col < 4; col++) {\r\n      const cellIndex = row * 4 + col;\r\n      const cell = cells[cellIndex];\r\n      const cellValue = board[row][col];\r\n\r\n      cell.classList = `field-cell field-cell--${cellValue}`;\r\n      cell.textContent = cellValue === 0 ? '' : cellValue;\r\n\r\n      if (cellValue === 0) {\r\n        cell.classList = 'field-cell';\r\n      }\r\n    }\r\n  }\r\n\r\n  score.textContent = curGame.getScore();\r\n\r\n  if (curGame.getStatus() === 'win') {\r\n    messageWin.classList.remove('hidden');\r\n  } else if (curGame.getStatus() === 'lose') {\r\n    messageLose.classList.remove('hidden');\r\n  } else {\r\n    messageWin.classList.add('hidden');\r\n    messageLose.classList.add('hidden');\r\n  }\r\n}\r\n","/* eslint-disable operator-linebreak */\r\n/* eslint-disable max-len */\r\n'use strict';\r\n\r\n/**\r\n * This class represents the game.\r\n * Now it has a basic structure, that is needed for testing.\r\n * Feel free to add more props and methods if needed.\r\n */\r\nclass Game {\r\n  constructor(initialState = this.createEmptyBoard()) {\r\n    this.board = initialState;\r\n    this.score = 0;\r\n    this.status = 'idle';\r\n  }\r\n\r\n  createEmptyBoard() {\r\n    return [\r\n      [0, 0, 0, 0],\r\n      [0, 0, 0, 0],\r\n      [0, 0, 0, 0],\r\n      [0, 0, 0, 0],\r\n    ];\r\n  }\r\n\r\n  moveLeft() {\r\n    let moved = false;\r\n\r\n    for (let row = 0; row < 4; row++) {\r\n      let newRow = this.board[row].filter((val) => val);\r\n\r\n      while (newRow.length < 4) {\r\n        newRow.push(0);\r\n      }\r\n\r\n      for (let i = 0; i < newRow.length - 1; i++) {\r\n        if (newRow[i] === newRow[i + 1]) {\r\n          newRow[i] *= 2;\r\n          newRow[i + 1] = 0;\r\n          this.score += newRow[i];\r\n        }\r\n      }\r\n      newRow = newRow.filter((val) => val);\r\n\r\n      while (newRow.length < 4) {\r\n        newRow.push(0);\r\n      }\r\n\r\n      if (this.board[row].join() !== newRow.join()) {\r\n        this.board[row] = newRow;\r\n        moved = true;\r\n      }\r\n    }\r\n\r\n    if (moved) {\r\n      this.addRandomTile();\r\n      this.gameStatus();\r\n    }\r\n  }\r\n\r\n  moveRight() {\r\n    let moved = false;\r\n\r\n    for (let row = 0; row < 4; row++) {\r\n      let newRow = this.board[row].filter((val) => val).reverse();\r\n\r\n      while (newRow.length < 4) {\r\n        newRow.push(0);\r\n      }\r\n\r\n      for (let i = 0; i < newRow.length - 1; i++) {\r\n        if (newRow[i] === newRow[i + 1]) {\r\n          newRow[i] *= 2;\r\n          newRow[i + 1] = 0;\r\n          this.score += newRow[i];\r\n        }\r\n      }\r\n      newRow = newRow.filter((val) => val).reverse();\r\n\r\n      while (newRow.length < 4) {\r\n        newRow.unshift(0);\r\n      }\r\n\r\n      if (this.board[row].join() !== newRow.join()) {\r\n        this.board[row] = newRow;\r\n        moved = true;\r\n      }\r\n    }\r\n\r\n    if (moved) {\r\n      this.addRandomTile();\r\n      this.gameStatus();\r\n    }\r\n  }\r\n\r\n  moveUp() {\r\n    let moved = false;\r\n\r\n    for (let col = 0; col < 4; col++) {\r\n      let newCol = [];\r\n\r\n      for (let row = 0; row < 4; row++) {\r\n        if (this.board[row][col] !== 0) {\r\n          newCol.push(this.board[row][col]);\r\n        }\r\n      }\r\n\r\n      while (newCol.length < 4) {\r\n        newCol.push(0);\r\n      }\r\n\r\n      for (let i = 0; i < newCol.length; i++) {\r\n        if (newCol[i] === newCol[i + 1]) {\r\n          newCol[i] *= 2;\r\n          newCol[i + 1] = 0;\r\n          this.score += newCol[i];\r\n        }\r\n      }\r\n\r\n      newCol = newCol.filter((val) => val);\r\n\r\n      while (newCol.length < 4) {\r\n        newCol.push(0);\r\n      }\r\n\r\n      for (let row = 0; row < 4; row++) {\r\n        if (this.board[row][col] !== newCol[row]) {\r\n          moved = true;\r\n        }\r\n        this.board[row][col] = newCol[row];\r\n      }\r\n    }\r\n\r\n    if (moved) {\r\n      this.addRandomTile();\r\n      this.gameStatus();\r\n    }\r\n  }\r\n\r\n  moveDown() {\r\n    let moved = false;\r\n\r\n    for (let col = 0; col < 4; col++) {\r\n      let newCol = [];\r\n\r\n      for (let row = 0; row < 4; row++) {\r\n        if (this.board[row][col] !== 0) {\r\n          newCol.push(this.board[row][col]);\r\n        }\r\n      }\r\n\r\n      while (newCol.length < 4) {\r\n        newCol.unshift(0);\r\n      }\r\n\r\n      for (let i = newCol.length - 1; i > 0; i--) {\r\n        if (newCol[i] === newCol[i - 1]) {\r\n          newCol[i] *= 2;\r\n          newCol[i - 1] = 0;\r\n          this.score += newCol[i];\r\n        }\r\n      }\r\n\r\n      newCol = newCol.filter((val) => val);\r\n\r\n      while (newCol.length < 4) {\r\n        newCol.unshift(0);\r\n      }\r\n\r\n      for (let row = 0; row < 4; row++) {\r\n        if (this.board[row][col] !== newCol[row]) {\r\n          moved = true;\r\n        }\r\n        this.board[row][col] = newCol[row];\r\n      }\r\n    }\r\n\r\n    if (moved) {\r\n      this.addRandomTile();\r\n      this.gameStatus();\r\n    }\r\n  }\r\n\r\n  getScore() {\r\n    return this.score;\r\n  }\r\n\r\n  getState() {\r\n    return this.board;\r\n  }\r\n\r\n  getStatus() {\r\n    return this.status;\r\n  }\r\n\r\n  start() {\r\n    this.board = this.createEmptyBoard();\r\n    this.score = 0;\r\n    this.status = 'playing';\r\n    this.addRandomTile();\r\n    this.addRandomTile();\r\n  }\r\n\r\n  restart() {\r\n    this.board = this.createEmptyBoard();\r\n    this.score = 0;\r\n    this.status = 'idle';\r\n  }\r\n\r\n  addRandomTile() {\r\n    const emptyTiles = [];\r\n\r\n    for (let row = 0; row < 4; row++) {\r\n      for (let cell = 0; cell < 4; cell++) {\r\n        if (this.board[row][cell] === 0) {\r\n          emptyTiles.push({\n            row, cell,\n          });\r\n        }\r\n      }\r\n    }\r\n\r\n    if (emptyTiles.length > 0) {\r\n      const { row, cell } =\r\n        emptyTiles[Math.floor(Math.random() * emptyTiles.length)];\r\n\r\n      this.board[row][cell] = Math.random() < 0.9 ? 2 : 4;\r\n    }\r\n  }\r\n\r\n  gameStatus() {\r\n    for (const row of this.board) {\r\n      if (row.includes(2048)) {\r\n        this.status = 'win';\r\n\r\n        return;\r\n      }\r\n    }\r\n\r\n    for (let row = 0; row < 4; row++) {\r\n      for (let cell = 0; cell < 4; cell++) {\r\n        if (this.board[row][cell] === 0) {\r\n          return;\r\n        }\r\n\r\n        if (row > 0 && this.board[row][cell] === this.board[row - 1][cell]) {\r\n          return;\r\n        }\r\n\r\n        if (cell > 0 && this.board[row][cell] === this.board[row][cell - 1]) {\r\n          return;\r\n        }\r\n      }\r\n    }\r\n\r\n    this.status = 'lose';\r\n  }\r\n}\r\n\r\nmodule.exports = Game;\r\n","function _class_call_check(instance, Constructor) {\n    if (!(instance instanceof Constructor)) throw new TypeError(\"Cannot call a class as a function\");\n}\nexport { _class_call_check as _ };\n","function _defineProperties(target, props) {\n    for (var i = 0; i < props.length; i++) {\n        var descriptor = props[i];\n        descriptor.enumerable = descriptor.enumerable || false;\n        descriptor.configurable = true;\n\n        if (\"value\" in descriptor) descriptor.writable = true;\n\n        Object.defineProperty(target, descriptor.key, descriptor);\n    }\n}\nfunction _create_class(Constructor, protoProps, staticProps) {\n    if (protoProps) _defineProperties(Constructor.prototype, protoProps);\n    if (staticProps) _defineProperties(Constructor, staticProps);\n\n    return Constructor;\n}\nexport { _create_class as _ };\n"],"names":["$197cd56b15c33885$var$game","protoProps","Game","initialState","arguments","length","createEmptyBoard","instance","Constructor","TypeError","board","score","status","key","value","_this","moved","row","_loop","newRow","filter","val","push","i","join","addRandomTile","gameStatus","reverse","unshift","col","newCol","row1","emptyTiles","cell","_emptyTiles_Math_floor","Math","floor","random","cell1","_iteratorNormalCompletion","_didIteratorError","_iteratorError","undefined","_step","_iterator","Symbol","iterator","next","done","includes","err","return","$4fc75ccb937ab1df$var$_defineProperties","target","props","descriptor","enumerable","configurable","writable","Object","defineProperty","prototype","$197cd56b15c33885$var$button","document","querySelector","$197cd56b15c33885$var$messageStart","$197cd56b15c33885$var$messageLose","$197cd56b15c33885$var$messageWin","$197cd56b15c33885$var$updateUI","curGame","cells","gameField","querySelectorAll","getState","cellValue","classList","concat","textContent","getScore","getStatus","remove","add","addEventListener","contains","start","restart","e","moveLeft","moveRight","moveUp","moveDown"],"version":3,"file":"index.a2b4fa1a.js.map"}